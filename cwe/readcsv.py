# -*- coding: UTF-8 -*-
import csv
import copy


def remove(data):
    if len(data)>4:
        if data[0:2]=='::':
            data=data[2:]
        if data[-2:]=='::':
            data=data[0:-2]
    return data


def get_applicable_platforms(data):
    applicable_platforms=[]
    if data!='-':
        data=remove(data)
        data=data.split(':')
        dict_={'name':'-','class':'-','prevalence':'-'}
        for i in range(0,len(data)):
            if 'CLASS' in data[i]:
                dict_['class']=data[i+1]
            elif 'NAME' in data[i]:
                dict_['name']=data[i+1]
            elif 'PREVALENCE' in data[i]:
                dict_['prevalence']=data[i+1]
                applicable_platforms.append(dict_)
                dict_={'name':'-','class':'-','prevalence':'-'}
    return applicable_platforms


        
def cheak(data):
    data_list=[]
    if data:
        flag=data[0][0]
        for i in data:
            if i[0]==flag:
                data_list.append(i)
            else:
                data_list[-1]+='::'+i
    return data_list
    
    
    
    
#以:分割为数组
def split(data):
    data_list=[]
    data=data.split(':')
    for i in data:
        #先判判断列表长度，奇数长度下一个一定是值，偶数长度下一个一定是键，键不可能有小写
        #如果长度为偶则说明i要全为大写才能是键，否则与上一个合并
        if not len(data_list)&1:
            if i.isupper() and i[0].isalpha():
                data_list.append(i)
            else:
                data_list[-1]+=':'+i
        else:
            data_list.append(i)
    return data_list

def analysis(data,temp={},default='-',list_value=[]):
    analysis_data=[]
    if data!='-':
        data=remove(data)
        data_list=data.split('::')
        data_list=cheak(data_list)
        #根据模板创建字典模板
        dict_temp={}
        ignore_key=[]
        for k,v in temp.items():
            if not v:
                ignore_key.append(k)
                continue
            if v in list_value:
                dict_temp[v]=[]
            else: 
                dict_temp[v]=default

        for value in data_list:
            value=split(value)
            if value==[]:
                continue
            dict_=copy.deepcopy(dict_temp)
            for i in range(0,len(value)):
                #i偶数，为键
                if not i&1:
                    #如果i
                    #如果键在模板中，用模板中的键
                    if temp.get(value[i]):
                        if temp.get(value[i]) in list_value:
                            #value[i+1]有可能为''
                            if value[i+1]:
                                dict_[temp.get(value[i])].append(value[i+1])
                        else:
                            if value[i+1]:
                                dict_[temp.get(value[i])]=value[i+1]
                    else:
                        #判断是否要忽略该键
                        if value[i] not in ignore_key:
                            if value[i] in list_value:
                                if dict_.get(value[i]) is None:
                                    if value[i+1]:
                                        dict_[value[i]]=[value[i+1]]
                                    else:
                                        dict_[value[i]]=[]
                                else:
                                    if value[i+1]:
                                        dict_[value[i]].append(value[i+1])
                            else:
                                if value[i+1]:
                                    dict_[value[i]]=value[i+1]
            analysis_data.append(dict_)
    return analysis_data

def readcsv(filepath):
    cwe_list=[]
    with open(filepath, "r", encoding="utf-8") as f:
        keys=f.readline().strip().lower().replace('-','_').replace(' ','_').split(',')
        keys[keys.index('name')]='cwe_name'
        keys[keys.index('description')]='desc'
        keys[keys.index('extended_description')]='extended_desc'
        keys[keys.index('related_weaknesses')]='related_weakness'
        data = csv.reader(f)
        for data_list in data:
            for i in range(0,len(data_list)):
                if not data_list[i]:
                    data_list[i]='-'
            data_dict=dict(zip(keys,data_list))
            data_dict['cwe_id']='CWE-'+data_dict['cwe_id']
            data_dict['related_weakness']=analysis(data_dict['related_weakness'],{'NATURE':'relationship','CWE ID':'cwe_id','VIEW ID':'view_id','ORDINAL':None})
            data_dict['applicable_platforms']=get_applicable_platforms(data_dict['applicable_platforms'])
            data_dict['background_details']=remove(data_dict['background_details'])
            data_dict['alternate_terms']=analysis(data_dict['alternate_terms'],{'TERM':'term','DESCRIPTION':'desc'})
            data_dict['modes_of_introduction']=analysis(data_dict['modes_of_introduction'],{'PHASE':'phase','NOTE':'note'})
            data_dict['exploitation_factors']=remove(data_dict['exploitation_factors'])
            data_dict['likelihood_of_exploit']=remove(data_dict['likelihood_of_exploit'])
            #'common_consequences'中'likelihood'是什么
            data_dict['common_consequences']=analysis(data_dict['common'
                                                                ''
                                                                '_consequences'],{'SCOPE':'scope','IMPACT':'technical_impact','NOTE':None,None:'likelihood'},list_value=['scope'])
            data_dict['detection_methods']=analysis(data_dict['detection_methods'],{'METHOD':'method','DESCRIPTION':'desc','EFFECTIVENESS':'effectiveness'})
            data_dict['potential_mitigations']=analysis(data_dict['potential_mitigations'],{'PHASE':'phase','DESCRIPTION':'desc','STRATEGY':'strategy'})
            data_dict['observed_examples']=analysis(data_dict['observed_examples'],{'REFERENCE':'reference','DESCRIPTION':'desc','LINK':None})
            if data_dict['functional_areas']=='-':
                data_dict['functional_areas']=[]
            else:
                data_dict['functional_areas']=remove(data_dict['functional_areas']).split('::')
            if data_dict['affected_resources']=='-':
                data_dict['affected_resources']=[]
            else:
                data_dict['affected_resources']=remove(data_dict['affected_resources']).split('::')
            data_dict['taxonomy_mappings']=analysis(data_dict['taxonomy_mappings'],{'TAXONOMY NAME':'name','ENTRY NAME':'node_name','MAPPING FIT':'fit','ENTRY ID':'node_id'})
            if data_dict['related_attack_patterns']=='-':
                data_dict['related_attack_patterns']=[]
            else:
                data_dict['related_attack_patterns']=remove(data_dict['related_attack_patterns']).split('::')
            data_dict['notes']=analysis(data_dict['notes'],{'TYPE':'type','NOTE':'note'})
            data_dict['belong_user']=''
            data_dict['is_delete']=0
            data_dict.pop('weakness_ordinalities')
            cwe_list.append(data_dict)

    return cwe_list