# -*- coding: UTF-8 -*-
import os
import time
import abc


class LogFiles(metaclass=abc.ABCMeta):
    LOG = '<log>'
    UPDATE = '<update>'
    __file_dict = {}
    __count_dict = {}

    def __init__(self):
        dir_path = os.path.dirname(os.path.abspath(__file__))
        self.logpath = os.path.join(dir_path, 'log')
        os.makedirs(self.logpath, exist_ok=True)

        self.filepath = None
        self.setfile()
        if LogFiles.__file_dict.get(self.filepath) is None:
            LogFiles.__file_dict[self.filepath] = open(self.filepath, 'a+')
            LogFiles.__count_dict[self.filepath] = 1
        else:
            LogFiles.__count_dict[self.filepath] += 1

        self.flag = None
        self.setflag()

    def __del__(self):
        LogFiles.__count_dict[self.filepath] -= 1
        if not LogFiles.__count_dict[self.filepath]:
            LogFiles.__file_dict[self.filepath].close()
            LogFiles.__file_dict.pop(self.filepath)
            LogFiles.__count_dict.pop(self.filepath)

    @abc.abstractmethod
    def setfile(self, filename='log.log'):
        self.filepath = os.path.join(self.logpath, filename)
        return

    @abc.abstractmethod
    def setflag(self, flag='update'):
        self.flag = '[' + flag + ']'
        return

    def updatelog(self, msg):
        log = self.__logformat(LogFiles.UPDATE) + ' ' + self.flag + ': ' + msg
        self.__write(log)

    def __logformat(self, head):
        assert head in [LogFiles.LOG, LogFiles.UPDATE], 'error flag'
        loghead = head + time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        return loghead

    def __write(self, msg):
        f = LogFiles.__file_dict.get(self.filepath)
        f.write(msg + '\r\n')
        f.flush()

    def info(self, msg, only_print=False):
        log = self.__logformat(LogFiles.LOG) + ' [info]: ' + msg
        print(log)
        if not only_print:
            self.__write(log)

    def warning(self, msg, only_print=False):
        log = self.__logformat(LogFiles.LOG) + ' [warning]: ' + msg
        print(log)
        if not only_print:
            self.__write(log)

    def error(self, msg, only_print=False):
        log = self.__logformat(LogFiles.LOG) + ' [error]: ' + msg
        print(log)
        if not only_print:
            self.__write(log)



class CveLog(LogFiles):
    def setfile(self, filename='cve_update.log'):
        return super().setfile(filename=filename)

    def setflag(self, flag='cve'):
        return super().setflag(flag=flag)


class CweLog(LogFiles):
    def setfile(self, filename='cwe_update.log'):
        return super().setfile(filename=filename)

    def setflag(self, flag='cwe'):
        return super().setflag(flag=flag)