# -*- coding: UTF-8 -*-
import requests
import config
from cve.slicing import Handle
from inter_down import FromNetGetDate
from cve import from_json_get_data
import pymongo
import os
import json
import time
import multiprocessing


def update_time():
    path = os.path.join(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")), "log")
    with open(os.path.join(path, "last_update.json"), "r") as f:
        data = json.load(f)
    data["cve_last_time"] = time.time()
    with open(os.path.join(path, "last_update.json"), "w") as f:
        json.dump(data, f)


def deal(url, log):
    col = pymongo.MongoClient(config.mongodb)["csr"]["vulnerability"]
    down = FromNetGetDate()
    down_data = down.download(url, save=False)
    log.info(f"下载成功:{url},准备上传数据库")
    cve_list_data = from_json_get_data.get_data(down_data)

    for data in cve_list_data:
        try:
            col.update_one({'vuln_id': data['vuln_id']}, {'$set': data}, upsert=True)
        except:
            col = pymongo.MongoClient(config.mongodb)["csr"]["vulnerability"]
            col.update_one({'vuln_id': data['vuln_id']}, {'$set': data}, upsert=True)
    log.info(f"上传数据库成功")


def main(log):
    log.info('开始更新')
    data = requests.request(method="GET", url=config.url, verify=False)
    data = data.text
    hondle = Handle(data)
    cve_data = hondle.handle()

    down_list = []


    for cve in cve_data:
        if cve.get("updated") < time.localtime(config.last_update.get("cve_last_time", 0)):
            continue
        down_list.append(cve.get("down_url"))
    if not down_list:
        log.info(f'未检测到更新')
        update_time()
        return
    log.info(f"检查到更新,开始下载,下载列表:{down_list}")

    pool = []
    for url in down_list:
        deal(url, log)  # 单进程
        ''' # 多进程
        p = multiprocessing.Process(target=deal, args=(url, log))
        p.daemon = True
        p.start()
        pool.append(p)
    for j in pool:
    j.join()
        '''
    update_time()
    log.info(f'cve更新成功')



from log import CveLog
if __name__ == '__main__':
    cve_log = CveLog()
    main(cve_log)