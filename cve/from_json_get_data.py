# -*- coding: UTF-8 -*-
import json
import config
import pymongo
import os


def get_vuln_id(dict_):
    return dict_.get('cve').get('CVE_data_meta').get('ID')

def get_impact3(dict_):
    temp_dict = dict_.get('impact')
    if not temp_dict is None:
        temp_dict = temp_dict.get('baseMetricV3')
    else:
        return None
    if not temp_dict is None:
        return temp_dict.get('cvssV3')
def get_impact2(dict_):
    temp_dict = dict_.get('impact')
    if not temp_dict is None:
        temp_dict = temp_dict.get('baseMetricV2')
    else:
        return None
    if not temp_dict is None:
        return temp_dict.get('cvssV2')
def get_baseMetricV2(dict_):
    temp_dict = dict_.get('impact')
    if not temp_dict is None:
        return temp_dict.get('baseMetricV2')
    else:
        return None


def get_score(dict_):
    score=None
    cvssV=get_impact3(dict_)
    if not cvssV is None:
        score=cvssV.get('baseScore')
    if score is None:
        cvssV=get_impact2(dict_)
        if not cvssV is None:
            score=cvssV.get('baseScore')
    if score is None:
        score='-'
    return score


def get_vuln_level(dict_):
    vuln_level=None
    cvssV=get_impact3(dict_)
    if not cvssV is None:
        vuln_level=cvssV.get('baseSeverity')
    if vuln_level is None: 
        baseMetricV2=get_baseMetricV2(dict_)
        if not baseMetricV2 is None:
            vuln_level=baseMetricV2.get('severity')
    if vuln_level is None:
        vuln_level='-'
    return vuln_level


def get_vuln_access(dict_):
    vuln_access=None
    cvssV=get_impact3(dict_)
    if not cvssV is None:
        vuln_access = cvssV.get('attackVector')
    if vuln_access is None:
        cvssV=get_impact2(dict_)
        if not cvssV is None:
            vuln_access = cvssV.get('attackVector')
    if vuln_access is None:
        vuln_access='-'
    return vuln_access


def get_publish_data(dict_):
    return dict_.get('publishedDate')


def get_last_update_date(dict_):
    return dict_.get('lastModifiedDate')


def get_vuln_desc(dict_):
    return dict_.get('cve').get('description').get('description_data')[0].get('value')



def get_cew_id(dict_):
    try:
        cew_id=dict_.get('cve').get('problemtype').get('problemtype_data')[0].get('description')[0].get('value')
    except:
        cew_id='-'
    return cew_id


def get_version(version_list):
    version=''
    for i in version_list:
        if i!='*' and i!='-':
            version+=' '+i
    version=version.strip()
    return version


def get_affected(dict_):
    type_list = ('o', 'a', 'h')
    affected_os = []
    affected_app = []
    affected_hardware = []
    return_data = [affected_os, affected_app, affected_hardware]
    nodeslist = dict_.get('configurations').get('nodes')
    # 每一个nodes包含一种os/app/hardware,但包含不同版本
    for i in nodeslist:
        cpe_matchlist = i.get('cpe_match')
        if cpe_matchlist is None:
            continue
        # 每一个cpe_matchlist包含一个版本
        for j in cpe_matchlist:
            cpe = j.get('cpe23Uri')
            cpe = cpe.split(':')
            # 种类未判断判断种类
            affected_type = cpe[2]
            affected_name=cpe[4].replace(".", "-")
            affected_list=return_data[type_list.index(affected_type)]
            isfind=False
            for k in affected_list:
                if k['name']==affected_name and k['vendor']==cpe[3]:
                    isfind=True
                    version_list=k['version']
                    version=get_version(cpe[5:])
                    if version and version not in version_list:
                        version_list.append(version)
                    break
            if not isfind:
                affected_dict = {}
                affected_dict['name'] = affected_name
                affected_dict['vendor'] = cpe[3]
                affected_dict['version'] = []
                version=get_version(cpe[5:])
                if version:
                    affected_dict['version'].append(version)
                affected_list.append(affected_dict)
    return return_data

def get_cve_ms_map(cve_ms_col):
    cve_ms_map={}
    try:
        for _item in cve_ms_col.find({}, {"_id": 0}):
            try:
                cve_ms_map[_item['cve']] = {
                   "type": _item['type'],
                   "solution": _item['solution'],
                   "patch": _item['patch']
                }
            except:
                pass
    except:
        with open(os.path.join(os.path.abspath(os.path.dirname(__file__)), "cve_ms_map.json"), "r") as f:
            cve_ms_map = json.load(f)

    return cve_ms_map



def from_desc_get_vuln_type(desc):
    res_list = []
    def check_str_count(word_list, count):
        idx = 0
        for x in word_list:
            if x in desc:
                idx += 1

        if idx >= count:
            return True
        return False
        
    gain_information_list = ['obtain', 'sensitive', 'information', 'read']
    desc = desc.lower()

    ### check the single word
    if "file inclusion" in desc:
        return ['file_inclusion']
    elif "csrf" in desc:
        return ['csrf']
    elif "gain privileges" in desc:
        return ['gain_privileges']
    elif "response splitting" in desc:
        return ['http_response_splitting']
    elif "xss" in desc:
        return ['xss']
    else:
        pass

    if check_str_count(gain_information_list, 2):
        res_list.append('gain_information')
    if "bypass" in desc:
        res_list.append("bypass_something")
    if "directory traversal" in desc:
        res_list.append('directory_traversal')
    if "sql injection" in desc:
        res_list.append("sql_injection")
    if "memory corruption" in desc:
        res_list.append("memory_corruption")
    if "overflow" in desc:
        res_list.append("overflow")
    if "execut" in desc:
        res_list.append("code_execution")
    if "denial of service" in desc:
        res_list.append('dos')
    return res_list

def get_vuln_type(dict_,cve_ms_map):
    vuln_type_map = {
    "Remote Code Execution": "code_execution",
    "Elevation of Privilege": "gain_privileges",
    "Information Disclosure": "gain_information",
    "Security Feature Bypass": "bypass_something",
    "Spoofing": "gain_information",
    "Tampering": "gain_information",
    "Denial of Service": "dos"
    }
    vuln_type = []
    vuln_id = get_vuln_id(dict_)
    if not cve_ms_map.get(vuln_id) is None:
        cve_type = cve_ms_map[vuln_id].get('type', [])
        vuln_type = [vuln_type_map.get(cve_type)]
    else:
        vuln_type = from_desc_get_vuln_type(get_vuln_desc(dict_))
    return vuln_type
    

def get_solution(dict_,cve_ms_map):
    vuln_id=get_vuln_id(dict_)
    solution='-'
    if not cve_ms_map.get(vuln_id) is None:
        solution_data = cve_ms_map[vuln_id]['solution']
        if None in solution_data:
            solution_data.remove(None)
        try:
            if solution_data != []:
                solution = ','.join(solution_data)
        except:
            pass
    return solution


def get_patch(dict_,cve_ms_map):
    vuln_id=get_vuln_id(dict_)
    patch='-'
    if not cve_ms_map.get(vuln_id) is None:
        patch_data = cve_ms_map[vuln_id]['patch']
        if None in patch_data:
            patch_data.remove(None)
        try:
            if patch_data != []:
                patch = ','.join(patch_data)
        except:
            pass
    return patch


def get_reference(dict_):
    try:
        reference_data = dict_['cve']['references']['reference_data']
        reference= [x['refsource'] + "-" + x['name'] for x in reference_data]
    except:
        reference=[]
    return reference



def get_data(data):
    data = data.get('CVE_Items')
    list_ = []
    cve_ms_col = pymongo.MongoClient(config.mongodb)["csr"]["vulnerability_msb_map"]
    cve_ms_map = get_cve_ms_map(cve_ms_col)
    for i in data:
        dict_ = {}
        dict_['vuln_id'] = get_vuln_id(i)
        dict_['vuln_name'] = get_vuln_id(i)
        dict_['vuln_type'] = get_vuln_type(i,cve_ms_map)
        dict_['score'] = get_score(i)
        dict_['vuln_level'] = get_vuln_level(i)
        dict_['vuln_access'] = get_vuln_access(i)
        dict_['publish_date'] = get_publish_data(i)
        dict_['last_update_date'] = get_last_update_date(i)
        affected_list = get_affected(i)
        dict_['affected_os'] = affected_list[0]
        dict_['affected_app'] = affected_list[1]
        dict_['affected_hardware'] = affected_list[2]
        dict_['vuln_desc'] = get_vuln_desc(i)

        # 没用的cve，之前描述说是和其它cve合并了。所以如果所有要有数据的cve则将REJECT过滤掉
        # if '** REJECT **' in dict_['vuln_desc']:
        #     continue

        dict_['solution'] = get_solution(i,cve_ms_map)
        dict_['patch'] = get_patch(i,cve_ms_map)
        dict_['reference'] = get_reference(i)
        dict_['cwe_id']=get_cew_id(i)
        dict_['belong_user']=''
        dict_['is_delete']=0
        list_.append(dict_)
    return list_


if __name__ == "__main__":
    import os
    dir_name=os.path.dirname(os.path.abspath(__file__))
    f=open(os.path.join(r"F:\爬取漏洞库\downloads", 'nvdcve-1.1-2016.json'))
    print(get_data(json.load(f)))
    f.close()
